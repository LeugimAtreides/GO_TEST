{"version":3,"file":"index.esm.js","sources":["../../dist/commands/coverage/src/index.js"],"sourcesContent":["import { __awaiter } from \"tslib\";\nimport { createCommand, ensureAbsolute, parseGlobalArgs, } from '@graphql-inspector/commands';\nimport { Logger, chalk } from '@graphql-inspector/logger';\nimport { coverage as calculateCoverage, getTypePrefix, } from '@graphql-inspector/core';\nimport { Source, print } from 'graphql';\nimport { extname } from 'path';\nimport { writeFileSync } from 'fs';\nexport function handler({ schema, documents, silent, writePath, }) {\n    const shouldWrite = typeof writePath !== 'undefined';\n    const coverage = calculateCoverage(schema, documents.map((doc) => new Source(print(doc.document), doc.location)));\n    if (silent !== true) {\n        renderCoverage(coverage);\n    }\n    if (shouldWrite) {\n        if (typeof writePath !== 'string') {\n            throw new Error(`--write is not valid file path: ${writePath}`);\n        }\n        const absPath = ensureAbsolute(writePath);\n        const ext = extname(absPath).replace('.', '').toLocaleLowerCase();\n        let output = undefined;\n        if (ext === 'json') {\n            output = outputJSON(coverage);\n        }\n        if (output) {\n            writeFileSync(absPath, output, {\n                encoding: 'utf-8',\n            });\n            Logger.success(`Available at ${absPath}\\n`);\n        }\n        else {\n            throw new Error(`Extension ${ext} is not supported`);\n        }\n    }\n}\nexport default createCommand((api) => {\n    const { loaders } = api;\n    return {\n        command: 'coverage <documents> <schema>',\n        describe: 'Schema coverage based on documents',\n        builder(yargs) {\n            return yargs\n                .positional('schema', {\n                describe: 'Point to a schema',\n                type: 'string',\n                demandOption: true,\n            })\n                .positional('documents', {\n                describe: 'Point to documents',\n                type: 'string',\n                demandOption: true,\n            })\n                .options({\n                w: {\n                    alias: 'write',\n                    describe: 'Write a file with coverage stats',\n                    type: 'string',\n                },\n                s: {\n                    alias: 'silent',\n                    describe: 'Do not render any stats in the terminal',\n                    type: 'boolean',\n                },\n            });\n        },\n        handler(args) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const writePath = args.write;\n                const silent = args.silent;\n                const { headers, token } = parseGlobalArgs(args);\n                const schema = yield loaders.loadSchema(args.schema, {\n                    token,\n                    headers,\n                });\n                const documents = yield loaders.loadDocuments(args.documents);\n                return handler({ schema, documents, silent, writePath });\n            });\n        },\n    };\n});\nfunction outputJSON(coverage) {\n    return JSON.stringify(coverage, null, 2);\n}\nfunction renderCoverage(coverage) {\n    Logger.info('Schema coverage based on documents:\\n');\n    for (const typeName in coverage.types) {\n        if (coverage.types.hasOwnProperty(typeName)) {\n            const typeCoverage = coverage.types[typeName];\n            Logger.log([\n                chalk.grey(getTypePrefix(typeCoverage.type)),\n                chalk.bold(`${typeName}`),\n                chalk.grey('{'),\n            ].join(' '));\n            for (const childName in typeCoverage.children) {\n                if (typeCoverage.children.hasOwnProperty(childName)) {\n                    const childCoverage = typeCoverage.children[childName];\n                    if (childCoverage.hits) {\n                        Logger.log([\n                            indent(childName, 2),\n                            chalk.italic.grey(`x ${childCoverage.hits}`),\n                        ].join(' '));\n                    }\n                    else {\n                        Logger.log([\n                            chalk.redBright(indent(childName, 2)),\n                            chalk.italic.grey('x 0'),\n                        ].join(' '));\n                    }\n                }\n            }\n            Logger.log(chalk.grey('}\\n'));\n        }\n    }\n}\nfunction indent(line, space) {\n    return line.padStart(line.length + space, ' ');\n}\n//# sourceMappingURL=index.js.map"],"names":["coverage","calculateCoverage"],"mappings":"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"}