import { __awaiter } from 'tslib';
import { isAbsolute, resolve } from 'path';
import yargs from 'yargs';

function useCommands(api) {
    return api.config.commands.map((name) => loadCommand(name)(api));
}
function createCommand(factory) {
    return factory;
}
function loadCommand(name) {
    const mod = require(`@graphql-inspector/${name}-command`);
    return mod.default || mod;
}
function ensureAbsolute(filepath, basepath = process.cwd()) {
    return isAbsolute(filepath) ? filepath : resolve(basepath, filepath);
}
function parseGlobalArgs(args) {
    const headers = {};
    if (args.header) {
        args.header.forEach((header) => {
            const [name, ...values] = header.split(':');
            headers[name] = values.join('');
        });
    }
    if (args.require) {
        args.require.forEach((mod) => require(mod));
    }
    return { headers, token: args.token };
}
function mockCommand(mod, cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            yargs.command(mod).parse(cmd, (err, _, output) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(output);
                }
            });
        });
    });
}

export { createCommand, ensureAbsolute, mockCommand, parseGlobalArgs, useCommands };
//# sourceMappingURL=index.esm.js.map
