'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

const tslib = require('tslib');
const path = require('path');
const yargs = _interopDefault(require('yargs'));

function useCommands(api) {
    return api.config.commands.map((name) => loadCommand(name)(api));
}
function createCommand(factory) {
    return factory;
}
function loadCommand(name) {
    const mod = require(`@graphql-inspector/${name}-command`);
    return mod.default || mod;
}
function ensureAbsolute(filepath, basepath = process.cwd()) {
    return path.isAbsolute(filepath) ? filepath : path.resolve(basepath, filepath);
}
function parseGlobalArgs(args) {
    const headers = {};
    if (args.header) {
        args.header.forEach((header) => {
            const [name, ...values] = header.split(':');
            headers[name] = values.join('');
        });
    }
    if (args.require) {
        args.require.forEach((mod) => require(mod));
    }
    return { headers, token: args.token };
}
function mockCommand(mod, cmd) {
    return tslib.__awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            yargs.command(mod).parse(cmd, (err, _, output) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(output);
                }
            });
        });
    });
}

exports.createCommand = createCommand;
exports.ensureAbsolute = ensureAbsolute;
exports.mockCommand = mockCommand;
exports.parseGlobalArgs = parseGlobalArgs;
exports.useCommands = useCommands;
//# sourceMappingURL=index.cjs.js.map
