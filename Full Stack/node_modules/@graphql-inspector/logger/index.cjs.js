'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

const env = _interopDefault(require('std-env'));
const chalk = _interopDefault(require('chalk'));
const logSymbols = _interopDefault(require('log-symbols'));
const figures = _interopDefault(require('figures'));

function bolderize(msg) {
    const findSingleQuotes = /\'([^']+)\'/gim;
    const findDoubleQuotes = /\"([^"]+)\"/gim;
    return msg
        .replace(findSingleQuotes, (_, value) => chalk.bold(value))
        .replace(findDoubleQuotes, (_, value) => chalk.bold(value));
}
let mockedFn = null;
const canBeFancy = env.tty === true;
const Logger = {
    success(msg) {
        emit('success', msg);
    },
    log(msg) {
        emit('log', msg);
    },
    info(msg) {
        emit('info', msg);
    },
    error(msg) {
        emit('error', msg);
    },
    warn(msg) {
        emit('warn', msg);
    },
};
function mockLogger(fn) {
    mockedFn = fn;
}
function unmockLogger() {
    mockedFn = null;
}
function emit(type, msg) {
    if (mockedFn) {
        return mockedFn(msg);
    }
    if (!canBeFancy) {
        return console.log(`[${type}]`, msg);
    }
    if (type === 'success') {
        emitSuccess(msg);
    }
    else if (type === 'error') {
        emitError(msg);
    }
    else if (type === 'info') {
        emitInfo(msg);
    }
    else if (type === 'warn') {
        emitWarn(msg);
    }
    else {
        console.log(msg);
    }
}
function emitSuccess(msg) {
    console.log(chalk.green('success'), msg);
}
function emitError(msg) {
    console.log(chalk.red('error'), msg);
}
function emitInfo(msg) {
    console.log(chalk.blue('info'), msg);
}
function emitWarn(msg) {
    console.log(chalk.yellow('warning'), msg);
}

exports.chalk = chalk;
exports.symbols = logSymbols;
exports.figures = figures;
exports.Logger = Logger;
exports.bolderize = bolderize;
exports.mockLogger = mockLogger;
exports.unmockLogger = unmockLogger;
//# sourceMappingURL=index.cjs.js.map
