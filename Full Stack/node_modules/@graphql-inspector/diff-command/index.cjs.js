'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const tslib = require('tslib');
const commands = require('@graphql-inspector/commands');
const logger = require('@graphql-inspector/logger');
const core = require('@graphql-inspector/core');
const fs = require('fs');

function handler(input) {
    const onComplete = input.onComplete
        ? resolveCompletionHandler(input.onComplete)
        : failOnBreakingChanges;
    const rules = input.rules
        ? input.rules
            .filter(isString)
            .map((name) => {
            const rule = resolveRule(name);
            if (!rule) {
                throw new Error(`\Rule '${name}' does not exist!\n`);
            }
            return rule;
        })
            .filter((f) => f)
        : [];
    const changes = core.diff(input.oldSchema, input.newSchema, rules);
    if (changes.length === 0) {
        logger.Logger.success('No changes detected');
        return;
    }
    logger.Logger.log(`\nDetected the following changes (${changes.length}) between schemas:\n`);
    const breakingChanges = changes.filter((change) => change.criticality.level === core.CriticalityLevel.Breaking);
    const dangerousChanges = changes.filter((change) => change.criticality.level === core.CriticalityLevel.Dangerous);
    const nonBreakingChanges = changes.filter((change) => change.criticality.level === core.CriticalityLevel.NonBreaking);
    if (breakingChanges.length) {
        reportBreakingChanges(breakingChanges);
    }
    if (dangerousChanges.length) {
        reportDangerousChanges(dangerousChanges);
    }
    if (nonBreakingChanges.length) {
        reportNonBreakingChanges(nonBreakingChanges);
    }
    onComplete({ breakingChanges, dangerousChanges, nonBreakingChanges });
}
const index = commands.createCommand((api) => {
    const { loaders } = api;
    return {
        command: 'diff <oldSchema> <newSchema>',
        describe: 'Compare two GraphQL Schemas',
        builder(yargs) {
            return yargs
                .positional('oldSchema', {
                describe: 'Point to an old schema',
                type: 'string',
                demandOption: true,
            })
                .positional('newSchema', {
                describe: 'Point to a new schema',
                type: 'string',
                demandOption: true,
            })
                .options({
                rule: {
                    describe: 'Add rules',
                    array: true,
                },
                onComplete: {
                    describe: 'Handle Completion',
                    type: 'string',
                },
            });
        },
        handler(args) {
            return tslib.__awaiter(this, void 0, void 0, function* () {
                try {
                    const oldSchemaPointer = args.oldSchema;
                    const newSchemaPointer = args.newSchema;
                    const { headers, token } = commands.parseGlobalArgs(args);
                    const oldSchema = yield loaders.loadSchema(oldSchemaPointer, {
                        headers,
                        token,
                    });
                    const newSchema = yield loaders.loadSchema(newSchemaPointer, {
                        headers,
                        token,
                    });
                    handler({
                        oldSchema,
                        newSchema,
                        rules: args.rule,
                        onComplete: args.onComplete,
                    });
                }
                catch (error) {
                    logger.Logger.error(error);
                    throw error;
                }
            });
        },
    };
});
function sortChanges(changes) {
    return changes.slice().sort((a, b) => {
        const aPath = a.path || '';
        const bPath = b.path || '';
        if (aPath > bPath) {
            return 1;
        }
        if (bPath > aPath) {
            return -1;
        }
        return 0;
    });
}
function reportBreakingChanges(changes) {
    const label = logger.symbols.error;
    const sorted = sortChanges(changes);
    sorted.forEach((change) => {
        logger.Logger.log(`${label}  ${logger.bolderize(change.message)}`);
    });
}
function reportDangerousChanges(changes) {
    const label = logger.symbols.warning;
    const sorted = sortChanges(changes);
    sorted.forEach((change) => {
        logger.Logger.log(`${label}  ${logger.bolderize(change.message)}`);
    });
}
function reportNonBreakingChanges(changes) {
    const label = logger.symbols.success;
    const sorted = sortChanges(changes);
    sorted.forEach((change) => {
        logger.Logger.log(`${label}  ${logger.bolderize(change.message)}`);
    });
}
function resolveRule(name) {
    const filepath = commands.ensureAbsolute(name);
    if (fs.existsSync(filepath)) {
        return require(filepath);
    }
    return core.DiffRule[name];
}
function resolveCompletionHandler(name) {
    const filepath = commands.ensureAbsolute(name);
    try {
        require.resolve(filepath);
    }
    catch (error) {
        throw new Error(`CompletionHandler '${name}' does not exist!`);
    }
    const mod = require(filepath);
    return (mod === null || mod === void 0 ? void 0 : mod.default) || mod;
}
function failOnBreakingChanges({ breakingChanges }) {
    const breakingCount = breakingChanges.length;
    if (breakingCount) {
        logger.Logger.error(`Detected ${breakingCount} breaking change${breakingCount > 1 ? 's' : ''}`);
        process.exit(1);
    }
    else {
        logger.Logger.success('No breaking changes detected');
    }
}
function isString(val) {
    return typeof val === 'string';
}

exports.default = index;
exports.handler = handler;
//# sourceMappingURL=index.cjs.js.map
