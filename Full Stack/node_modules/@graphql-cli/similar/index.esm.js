import { __awaiter } from 'tslib';
import { defineCommand } from '@graphql-cli/common';
import { loaders } from '@graphql-cli/loaders';
import { handler } from '@graphql-inspector/similar-command';

function parseGlobalArgs(args) {
    const headers = {};
    if (args.header) {
        args.header.forEach((header) => {
            const [name, ...values] = header.split(':');
            headers[name] = values.join('');
        });
    }
    if (args.require) {
        args.require.forEach((mod) => require(mod));
    }
    return { headers, token: args.token };
}
const createInspectorExtension = (name) => (api) => {
    loaders.forEach((loader) => {
        api.loaders.schema.register(loader);
    });
    loaders.forEach((loader) => {
        api.loaders.documents.register(loader);
    });
    return {
        name,
    };
};

const index = defineCommand((api) => {
    return {
        command: 'similar [project]',
        describe: 'Find similar types in a schema',
        builder(yargs) {
            return yargs
                .positional('project', {
                describe: 'Point to a project or schema',
                type: 'string',
            })
                .options({
                name: {
                    alias: 'n',
                    describe: 'Name of a type',
                    type: 'string',
                },
                threshold: {
                    alias: 't',
                    describe: 'Threshold of similarity ratio',
                    type: 'number',
                },
                write: {
                    alias: 'w',
                    describe: 'Write a file with stats',
                    type: 'string',
                },
                require: {
                    alias: 'r',
                    describe: 'Require modules',
                    type: 'array',
                },
                token: {
                    alias: 't',
                    describe: 'Access Token',
                    type: 'string',
                },
                header: {
                    alias: 'h',
                    describe: 'Http Header',
                    type: 'array',
                },
                config: {
                    alias: 'c',
                    type: 'string',
                    describe: 'Location of GraphQL Config',
                },
            });
        },
        handler(args) {
            return __awaiter(this, void 0, void 0, function* () {
                const writePath = args.write;
                const type = args.name;
                const threshold = args.threshold;
                const { headers, token } = parseGlobalArgs(args);
                const config = yield api.useConfig({
                    rootDir: args.config || process.cwd(),
                    extensions: [createInspectorExtension('similar')],
                });
                const project = config.projects[args.project || 'default'];
                const { loadSchema } = api.useLoaders({ loaders });
                const schema = yield (project.getSchema() ||
                    loadSchema(args.project, {
                        headers,
                        token,
                    }));
                return handler({ schema, writePath, threshold, type });
            });
        },
    };
});

export default index;
//# sourceMappingURL=index.esm.js.map
